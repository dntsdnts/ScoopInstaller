# Usage: scoop import <path/url to scoopfile.json>
# Summary: Imports apps, buckets and configs from a Scoopfile in JSON format
# Help: To replicate a Scoop installation from a file stored on Desktop, run
#      scoop import Desktop\scoopfile.json

param(
    [Parameter(Mandatory)]
    [String]
    $scoopfile
)

. "$PSScriptRoot\..\lib\manifest.ps1"

$import = $null
$bucket_names = @()
$def_arch = Get-DefaultArchitecture

if (Test-Path $scoopfile) {
    $import = parse_json $scoopfile
} elseif ($scoopfile -match '^(ht|f)tps?://|\\\\') {
    $import = url_manifest $scoopfile
}

if (!$import) { abort 'Input file not a valid JSON.' }

foreach ($item in $import.config.PSObject.Properties) {
    set_config $item.Name $item.Value | Out-Null
    Write-Host "'$($item.Name)' has been set to '$($item.Value)'"
}

foreach ($item in $import.buckets) {
    add_bucket $item.Name $item.Source | Out-Null
    $bucket_names += $item.Name
}

foreach ($item in $import.apps) {
    $instArgs = @()
    $holdArgs = @()
    $info = $item.Info -Split ', '
    if ('Global install' -in $info) {
        $instArgs += '--global'
        $holdArgs += '--global'
    }
    if ('64bit' -in $info -and '64bit' -ne $def_arch) {
        $instArgs += '--arch', '64bit'
    } elseif ('32bit' -in $info -and '32bit' -ne $def_arch) {
        $instArgs += '--arch', '32bit'
    } elseif ('arm64' -in $info -and 'arm64' -ne $def_arch) {
        $instArgs += '--arch', 'arm64'
    }

    $app = if ($item.Source -in $bucket_names) {
        "$($item.Source)/$($item.Name)"
    } elseif ($item.Source -eq '<auto-generated>') {
        "$($item.Name)@$($item.Version)"
    } else {
        $item.Source
    }

    & "$PSScriptRoot\scoop-install.ps1" $app @instArgs

    if ('Held package' -in $info) {
        & "$PSScriptRoot\scoop-hold.ps1" $item.Name @holdArgs
    }
}

# SIG # Begin signature block
# MIIFcQYJKoZIhvcNAQcCoIIFYjCCBV4CAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCAyWgHM6a9ea2CP
# bPLGNYp4OnLQNaHlTKFOQM5ByF48ZaCCAvIwggLuMIIB1qADAgECAhBRXjN43tOe
# vkj4l+euvSLrMA0GCSqGSIb3DQEBDQUAMA8xDTALBgNVBAMMBHFycXIwHhcNMjQw
# NjI5MDczMTE4WhcNMjUwNjI5MDc1MTE4WjAPMQ0wCwYDVQQDDARxcnFyMIIBIjAN
# BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzGyCuR6iKpn8DX3kWN4b7mG9FwOf
# P+3w/qAPET+0ejsqwRfd3PbQBtCln8LP40sTe0Oy5tOFez63/tXshModzgfA+5cA
# iGG1I1YMVRHjpVPd24tZLr+6kkOR6az+VFS3zRCWhH/kN5oMxxkEt7vacZC1QRrh
# PQWcCVXYorPmZwPNHws5k7ZxtPHWT367HZrzrzHXW0VB+XX52a7EgRWFVzAaCziH
# DHUTAvnDwbnLGt1kfX43AxvcOPXpzFPtpEXh+DRgwKGjJaHKzuWYzK8lHs6TXbZF
# QbJI4SN4xgq4+i2ceZECPl4ROzG9HaO7s4Q4TmeXAcyziMxb55QHQDauwQIDAQAB
# o0YwRDAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwMwHQYDVR0O
# BBYEFFxJWt2yBxX0gUBoRDAcm4HuLs9LMA0GCSqGSIb3DQEBDQUAA4IBAQBIqYh9
# /0VLnlt0csz4RWJf6tpmdUrv39mlXfJXBQBgSjKrUNph1lyvEnXorTqCTyT5cjQ5
# 5GXaN4jQYpE2FISWUte/b+JY0WPl5xS3Ewl5c6HVIwDZ/54hXKezQu18NVVRvbAL
# 5blL+fn+NFMakRiP8Z/advmSN7qsF8H/HWSTRnkAAzfDe7folyzfgmej4Stk7XRX
# QabaUPeiYTiJGhY0FFknsXLIwk3F0azE5LRxUD7qhoK2nFP9yPjVXqfkmxOt2WPo
# 7FGDPJYS0iPB/oQO4/+3x0YHXgmE8BoicNRA9jQJ1s/gDQOX0qOWgbecdwNef1u/
# Tnv+D9lQdt4kF86zMYIB1TCCAdECAQEwIzAPMQ0wCwYDVQQDDARxcnFyAhBRXjN4
# 3tOevkj4l+euvSLrMA0GCWCGSAFlAwQCAQUAoIGEMBgGCisGAQQBgjcCAQwxCjAI
# oAKAAKECgAAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIB
# CzEOMAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIJAoA6cuH19rKcitOrFk
# serkCthLalysi8Uct/MFgscmMA0GCSqGSIb3DQEBAQUABIIBAIH/kVtGX21zckOH
# 8ZNK33Q87yudZ4WwSYmu1vJ3QX2NphaR0ox5dct+qpSestLMwmUvrviqnkVoAoLc
# PtLRWWw5zzmT60UinI8MnSY1pYVv1omboBi0OmleuPVmzcc0V0ukN855KiryrQzQ
# 4a7ljNUFUHliFIqMoHUNpG9Evbylv5JzAQSiUtuwx54W64sxFM5WAmV/vi4rDDd/
# WITsj4tR+e0sGthFOyX4prmpyY4qAASUqhpDs6htibQycmPdrNEVZblGYH/EcI8c
# TeDAO56TCBRYBvECYALMgyYYK2cIVGJ3oMe/f0Lz32Ue5fFJKimSaOQ8AXfeQrk9
# mjlqWwM=
# SIG # End signature block
